####################################
##### Arquivo: app.py
##### Desenvolvedor: Juan F. Voltolini
##### Institui√ß√£o: FIAP
##### Trabalho: Global Solution - 1¬∫ Semestre
##### Grupo: Felipe Sabino da Silva, Juan Felipe Voltolini, Luiz Henrique Ribeiro de Oliveira, Marco Aur√©lio Eberhardt Assump√ß√£o e Paulo Henrique Senise
####################################

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import sys
import os
from pathlib import Path
import numpy as np
import base64
from io import BytesIO

# Adicionar o diret√≥rio src ao path para importa√ß√µes
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from src.api.controller import get_controller
from src.utils.logging import setup_logging, get_logger
from src.r_analysis import RAnalyzer

# Configurar logging
setup_logging()
logger = get_logger(__name__)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Monitoramento de Qualidade da √Ågua",
    page_icon="üíß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .metric-card {
        background-color: #f0f2f6;
        padding: 10px;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
    }
    .alert-high {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
        padding: 10px;
        border-radius: 5px;
    }
    .alert-medium {
        background-color: #fff3e0;
        border-left: 5px solid #ff9800;
        padding: 10px;
        border-radius: 5px;
    }
    .status-potable {
        color: #4caf50;
        font-weight: bold;
    }
    .status-not-potable {
        color: #f44336;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)


@st.cache_data(ttl=60)  # Cache por 60 segundos
def get_system_statistics():
    """Recupera estat√≠sticas do sistema com cache."""
    try:
        controller = get_controller()
        return controller.get_statistics()
    except Exception as e:
        logger.error(f"Erro ao carregar estat√≠sticas: {e}")
        return {}


@st.cache_data(ttl=30)  # Cache por 30 segundos
def get_recent_readings(limit=100):
    """Recupera leituras recentes com cache."""
    try:
        controller = get_controller()
        return controller.get_readings(limit)
    except Exception as e:
        logger.error(f"Erro ao carregar leituras: {e}")
        return []


@st.cache_data(ttl=30)  # Cache por 30 segundos
def get_recent_alerts():
    """Recupera alertas recentes com cache."""
    try:
        controller = get_controller()
        return controller.get_alerts()
    except Exception as e:
        logger.error(f"Erro ao carregar alertas: {e}")
        return []


def main():
    st.title("üíß Sistema de Monitoramento de Qualidade da √Ågua")
    st.markdown("**Monitoramento em tempo real da potabilidade da √°gua usando IoT e Machine Learning**")

    # Sidebar
    st.sidebar.title("Navega√ß√£o")
    page = st.sidebar.selectbox(
        "Escolha uma p√°gina:",
        ["Dashboard", "An√°lise Detalhada", "Dataset", "Hist√≥rico", "Alertas", "Configura√ß√µes", "An√°lise em R"]
    )

    if page == "Dashboard":
        show_dashboard()
    elif page == "An√°lise Detalhada":
        show_detailed_analysis()
    elif page == "Dataset":
        show_dataset()
    elif page == "Hist√≥rico":
        show_history()
    elif page == "Alertas":
        show_alerts()
    elif page == "Configura√ß√µes":
        show_settings()
    elif page == "An√°lise em R":
        show_r_analysis()


def show_dashboard():
    """Exibe dashboard principal."""
    st.header("üìä Dashboard Principal")

    # Carregar dados
    stats = get_system_statistics()

    if not stats or 'error' in stats:
        st.error("‚ùå Erro ao carregar dados do sistema. Verifique a conex√£o com o banco de dados.")
        return

    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Total de Leituras", stats.get('total_readings', 0))

    with col2:
        potable_pct = stats.get('potable_percentage', 0)
        st.metric("√Ågua Pot√°vel (%)", f"{potable_pct:.1f}%")

    with col3:
        st.metric("Alertas Ativos", stats.get('alerts_count', 0))

    with col4:
        if stats.get('last_reading'):
            last_time = datetime.fromisoformat(stats['last_reading']['timestamp'].replace('Z', '+00:00'))
            minutes_ago = int((datetime.now() - last_time.replace(tzinfo=None)).total_seconds() / 60)
            st.metric("√öltima Leitura", f"{minutes_ago} min atr√°s")
        else:
            st.metric("√öltima Leitura", "N/A")

    # Status atual
    st.subheader("üìç Status Atual do Sistema")

    if stats.get('last_reading'):
        last_reading = stats['last_reading']
        col1, col2 = st.columns([2, 1])

        with col1:
            st.markdown(f"""
            **√öltima Leitura:** {last_reading['timestamp']}

            **Par√¢metros:**
            - pH: {last_reading['ph']:.2f}
            - Turbidez: {last_reading['turbidity']:.2f} NTU
            - Cloraminas: {last_reading['chloramines']:.2f} ppm
            """)

        with col2:
            if last_reading['potability'] == 1:
                st.success("‚úÖ √Ågua POT√ÅVEL")
            else:
                st.error("‚ö†Ô∏è √Ågua N√ÉO POT√ÅVEL")

    # Gr√°ficos
    st.subheader("üìà Tend√™ncias Recentes")

    readings = get_recent_readings(50)  # √öltimas 50 leituras

    if readings:
        df = pd.DataFrame(readings)
        df['timestamp'] = pd.to_datetime(df['timestamp'], format='%Y-%m-%dT%H:%M:%S.%f')

        # Gr√°fico de pH ao longo do tempo
        col1, col2 = st.columns(2)

        with col1:
            fig_ph = px.line(df, x='timestamp', y='ph', title='pH ao Longo do Tempo')
            fig_ph.add_hline(y=6.5, line_dash="dash", line_color="red", annotation_text="pH M√≠n")
            fig_ph.add_hline(y=8.5, line_dash="dash", line_color="red", annotation_text="pH M√°x")
            st.plotly_chart(fig_ph, use_container_width=True)

        with col2:
            fig_turb = px.line(df, x='timestamp', y='turbidity', title='Turbidez ao Longo do Tempo')
            fig_turb.add_hline(y=5, line_dash="dash", line_color="orange", annotation_text="Limite Ideal")
            st.plotly_chart(fig_turb, use_container_width=True)

        # Distribui√ß√£o de potabilidade
        potability_counts = df['potability_label'].value_counts()
        fig_pie = px.pie(values=potability_counts.values, names=potability_counts.index,
                         title='Distribui√ß√£o de Potabilidade')
        st.plotly_chart(fig_pie, use_container_width=True)


def show_detailed_analysis():
    """Exibe an√°lise detalhada."""
    st.header("üî¨ An√°lise Detalhada")

    st.markdown("Insira valores dos sensores para an√°lise detalhada da qualidade da √°gua:")

    # Formul√°rio para entrada de dados
    with st.form("analysis_form"):
        col1, col2, col3 = st.columns(3)

        with col1:
            ph = st.number_input("pH", min_value=0.0, max_value=14.0, value=7.0, step=0.1)

        with col2:
            turbidity = st.number_input("Turbidez (NTU)", min_value=0.0, value=4.0, step=0.1)

        with col3:
            chloramines = st.number_input("Cloraminas (ppm)", min_value=0.0, value=1.0, step=0.1)

        submitted = st.form_submit_button("Analisar")

    if submitted:
        try:
            controller = get_controller()

            sensor_data = {
                'ph': ph,
                'turbidity': turbidity,
                'chloramines': chloramines
            }

            # Fazer an√°lise detalhada
            evaluation = controller.evaluate_water_quality_detailed(sensor_data)

            if 'error' in evaluation:
                st.error(f"Erro na an√°lise: {evaluation['error']}")
                return

            # Exibir resultados
            col1, col2 = st.columns([2, 1])

            with col1:
                st.subheader("üìä Resultado da An√°lise")

                # Status geral
                if evaluation['is_potable']:
                    st.success("‚úÖ √Ågua POT√ÅVEL")
                else:
                    st.error("‚ö†Ô∏è √Ågua N√ÉO POT√ÅVEL")

                # N√≠vel de confian√ßa
                confidence = evaluation['confidence'] * 100
                st.metric("Confian√ßa da Predi√ß√£o", f"{confidence:.1f}%")

                # Probabilidades
                prob_potable = evaluation['probabilities']['potable'] * 100
                prob_not_potable = evaluation['probabilities']['not_potable'] * 100

                st.markdown("**Probabilidades:**")
                st.markdown(f"- Pot√°vel: {prob_potable:.1f}%")
                st.markdown(f"- N√£o Pot√°vel: {prob_not_potable:.1f}%")

            with col2:
                # N√≠vel de risco
                risk_level = evaluation['risk_level']
                risk_colors = {
                    'muito_baixo': 'green',
                    'baixo': 'lightgreen',
                    'medio': 'orange',
                    'alto': 'red'
                }

                st.markdown(
                    f"**N√≠vel de Risco:** <span style='color: {risk_colors.get(risk_level, 'gray')}'>{risk_level.replace('_', ' ').title()}</span>",
                    unsafe_allow_html=True)

            # An√°lise de par√¢metros
            st.subheader("üîç An√°lise de Par√¢metros")

            for param, analysis in evaluation['parameter_analysis'].items():
                col1, col2, col3 = st.columns([1, 1, 2])

                with col1:
                    st.metric(param.title(), f"{analysis['value']:.2f}")

                with col2:
                    status = analysis['status']
                    if status == 'normal':
                        st.success("Normal")
                    elif status == 'atencao':
                        st.warning("Aten√ß√£o")
                    else:
                        st.error("Cr√≠tico")

                with col3:
                    st.text(f"Faixa ideal: {analysis['ideal_range']}")

            # Recomenda√ß√µes
            st.subheader("üí° Recomenda√ß√µes")
            for rec in evaluation['recommendations']:
                st.markdown(f"- {rec}")

        except Exception as e:
            st.error(f"Erro na an√°lise: {e}")
            logger.error(f"Erro na an√°lise detalhada: {e}")


def show_history():
    """Exibe hist√≥rico de leituras."""
    st.header("üìö Hist√≥rico de Leituras")

    # Op√ß√µes de filtro
    col1, col2 = st.columns(2)

    with col1:
        limit = st.selectbox("N√∫mero de leituras:", [50, 100, 200, 500, 1000], index=1)

    with col2:
        show_only_alerts = st.checkbox("Mostrar apenas alertas")

    # Carregar dados
    if show_only_alerts:
        readings = get_recent_alerts()
    else:
        readings = get_recent_readings(limit)

    if not readings:
        st.warning("Nenhuma leitura encontrada.")
        return

    # Converter para DataFrame
    df = pd.DataFrame(readings)
    df['timestamp'] = pd.to_datetime(df['timestamp'], format='%Y-%m-%dT%H:%M:%S.%f')

    # Estat√≠sticas r√°pidas
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("Total de Registros", len(df))

    with col2:
        if 'potability' in df.columns:
            potable_count = (df['potability'] == 1).sum()
            st.metric("√Ågua Pot√°vel", potable_count)

    with col3:
        if 'potability' in df.columns:
            not_potable_count = (df['potability'] == 0).sum()
            st.metric("√Ågua N√£o Pot√°vel", not_potable_count)

    # Tabela de dados
    st.subheader("üìã Dados Detalhados")

    # Preparar dados para exibi√ß√£o
    display_df = df.copy()
    display_df['timestamp'] = display_df['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')

    if 'potability_label' in display_df.columns:
        display_df['Status'] = display_df['potability_label'].map({
            'POTAVEL': '‚úÖ Pot√°vel',
            'NAO_POTAVEL': '‚ö†Ô∏è N√£o Pot√°vel'
        })

    # Renomear colunas para exibi√ß√£o
    column_names = {
        'timestamp': 'Data/Hora',
        'ph': 'pH',
        'turbidity': 'Turbidez (NTU)',
        'chloramines': 'Cloraminas (ppm)',
        'Status': 'Status'
    }

    display_columns = ['timestamp', 'ph', 'turbidity', 'chloramines']
    if 'Status' in display_df.columns:
        display_columns.append('Status')

    st.dataframe(
        display_df[display_columns].rename(columns=column_names),
        use_container_width=True
    )

    # Op√ß√£o de download
    csv = df.to_csv(index=False)
    st.download_button(
        label="üì• Baixar dados em CSV",
        data=csv,
        file_name=f"water_quality_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        mime="text/csv"
    )


def show_alerts():
    """Exibe alertas ativos."""
    st.header("üö® Alertas e Notifica√ß√µes")

    alerts = get_recent_alerts()

    if not alerts:
        st.success("‚úÖ Nenhum alerta ativo no momento!")
        return

    st.warning(f"‚ö†Ô∏è {len(alerts)} alerta(s) ativo(s)")

    for alert in alerts:
        severity = alert.get('severity', 'media')

        if severity == 'critica':
            alert_class = 'alert-high'
            icon = 'üî¥'
        elif severity == 'alta':
            alert_class = 'alert-high'
            icon = 'üü†'
        else:
            alert_class = 'alert-medium'
            icon = 'üü°'

        st.markdown(f"""
        <div class="{alert_class}">
            <h4>{icon} Alerta - Severidade: {severity.title()}</h4>
            <p><strong>Data/Hora:</strong> {alert['timestamp']}</p>
            <p><strong>Descri√ß√£o:</strong> {alert['message']}</p>
            <p><strong>Par√¢metros:</strong> pH={alert['ph']:.2f}, Turbidez={alert['turbidity']:.2f}, Cloraminas={alert['chloramines']:.2f}</p>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("---")


def show_settings():
    """Exibe configura√ß√µes do sistema."""
    st.header("‚öôÔ∏è Configura√ß√µes do Sistema")

    st.subheader("üîÑ Atualiza√ß√£o de Dados")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("üîÑ Atualizar Cache"):
            st.cache_data.clear()
            st.success("Cache limpo com sucesso!")

    with col2:
        if st.button("üìä Recarregar Estat√≠sticas"):
            st.rerun()

    st.subheader("üéõÔ∏è Par√¢metros de Qualidade")

    st.markdown("""
    **Faixas de Refer√™ncia para Qualidade da √Ågua:**

    - **pH:** 6.5 - 8.5 (ideal)
    - **Turbidez:** < 5 NTU (ideal)
    - **Cloraminas:** 0.2 - 2.0 ppm (ideal)
    """)

    st.subheader("‚ÑπÔ∏è Informa√ß√µes do Sistema")

    st.markdown("""
    **Sistema de Monitoramento de Qualidade da √Ågua**

    - **Vers√£o:** 1.0.0
    - **Desenvolvido por:** Felipe Sabino da Silva, Juan Felipe Voltolini, Luiz Henrique Ribeiro de Oliveira, Marco Aur√©lio Eberhardt Assump√ß√£o e Paulo Henrique Senise
    - **Institui√ß√£o:** FIAP
    - **Projeto:** Global Solution - 1¬∫ Semestre

    **Tecnologias Utilizadas:**
    - Python + Streamlit (Interface)
    - Scikit-learn (Machine Learning)
    - Oracle Database (Persist√™ncia)
    - ESP32 + Sensores (IoT)
    """)


def show_dataset():
    """Exibe informa√ß√µes sobre o dataset de treinamento."""
    st.header("üìä Dataset de Treinamento")

    try:
        # Carregar dataset
        dataset_path = Path(__file__).parent.parent.parent / "water_potability.csv"

        if not dataset_path.exists():
            st.error("‚ùå Dataset n√£o encontrado!")
            return

        df = pd.read_csv(dataset_path)

        # Informa√ß√µes b√°sicas
        st.subheader("‚ÑπÔ∏è Informa√ß√µes B√°sicas")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("Total de Registros", len(df))

        with col2:
            missing_values = df.isnull().sum().sum()
            st.metric("Valores Ausentes", missing_values)

        with col3:
            potable_count = df['Potability'].sum()
            st.metric("√Ågua Pot√°vel", potable_count)

        with col4:
            non_potable = len(df) - potable_count
            st.metric("√Ågua N√£o Pot√°vel", non_potable)

        # Distribui√ß√£o da vari√°vel target
        st.subheader("üéØ Distribui√ß√£o da Vari√°vel Target")

        col1, col2 = st.columns([1, 1])

        with col1:
            potability_counts = df['Potability'].value_counts()
            fig_pie = px.pie(
                values=potability_counts.values,
                names=['N√£o Pot√°vel', 'Pot√°vel'],
                title='Distribui√ß√£o de Potabilidade',
                color_discrete_sequence=['#ff6b6b', '#51cf66']
            )
            st.plotly_chart(fig_pie, use_container_width=True)

        with col2:
            st.markdown(f"""
            **Estat√≠sticas da Vari√°vel Target:**

            - **√Ågua Pot√°vel:** {potable_count} ({potable_count / len(df) * 100:.1f}%)
            - **√Ågua N√£o Pot√°vel:** {non_potable} ({non_potable / len(df) * 100:.1f}%)
            - **Balanceamento:** {'Desbalanceado' if abs(potable_count - non_potable) > len(df) * 0.1 else 'Balanceado'}

            **Observa√ß√µes:**
            - Dataset com {len(df)} amostras
            - {df.shape[1]} features + 1 target
            - {missing_values} valores ausentes no total
            """)

        # Estat√≠sticas das features
        st.subheader("üìà Estat√≠sticas das Features")

        # Preparar dados para estat√≠sticas
        feature_columns = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate',
                           'Conductivity', 'Organic_carbon', 'Trihalomethanes', 'Turbidity']

        stats_data = []
        for col in feature_columns:
            if col in df.columns:
                stats_data.append({
                    'Feature': col,
                    'M√©dia': f"{df[col].mean():.2f}",
                    'Mediana': f"{df[col].median():.2f}",
                    'Desvio Padr√£o': f"{df[col].std():.2f}",
                    'M√≠nimo': f"{df[col].min():.2f}",
                    'M√°ximo': f"{df[col].max():.2f}",
                    'Valores Ausentes': df[col].isnull().sum()
                })

        stats_df = pd.DataFrame(stats_data)
        st.dataframe(stats_df, use_container_width=True)

        # Visualiza√ß√µes das features
        st.subheader("üìä Distribui√ß√µes das Features")

        # Selecionar features para visualizar
        selected_features = st.multiselect(
            "Selecione features para visualizar:",
            feature_columns,
            default=['ph', 'Turbidity', 'Chloramines'][:3]
        )

        if selected_features:
            # Criar histogramas
            for feature in selected_features:
                if feature in df.columns:
                    col1, col2 = st.columns([2, 1])

                    with col1:
                        # Histograma por potabilidade
                        fig = px.histogram(
                            df,
                            x=feature,
                            color='Potability',
                            nbins=30,
                            title=f'Distribui√ß√£o de {feature} por Potabilidade',
                            color_discrete_map={0: '#ff6b6b', 1: '#51cf66'},
                            labels={'Potability': 'Potabilidade'}
                        )
                        fig.update_layout(barmode='overlay')
                        fig.update_traces(opacity=0.7)
                        st.plotly_chart(fig, use_container_width=True)

                    with col2:
                        # Box plot
                        fig_box = px.box(
                            df,
                            y=feature,
                            color='Potability',
                            title=f'Box Plot - {feature}',
                            color_discrete_map={0: '#ff6b6b', 1: '#51cf66'}
                        )
                        st.plotly_chart(fig_box, use_container_width=True)

        # Matriz de correla√ß√£o
        st.subheader("üîó Matriz de Correla√ß√£o")

        # Calcular correla√ß√£o apenas para colunas num√©ricas
        numeric_df = df[feature_columns + ['Potability']].select_dtypes(include=[np.number])
        correlation_matrix = numeric_df.corr()

        fig_corr = px.imshow(
            correlation_matrix,
            text_auto=True,
            aspect="auto",
            title="Matriz de Correla√ß√£o entre Features",
            color_continuous_scale='RdBu_r'
        )
        st.plotly_chart(fig_corr, use_container_width=True)

        # Performance do modelo
        st.subheader("üéØ Performance do Modelo")

        # Verificar se existe modelo treinado
        model_path = Path(__file__).parent.parent.parent / "src/model/water_quality_model.pkl"

        if model_path.exists():
            try:
                import joblib
                model_data = joblib.load(model_path)

                if 'model' in model_data and hasattr(model_data['model'], 'feature_importances_'):
                    # Import√¢ncia das features
                    feature_importance = model_data['model'].feature_importances_
                    feature_names = feature_columns

                    importance_df = pd.DataFrame({
                        'Feature': feature_names,
                        'Import√¢ncia': feature_importance
                    }).sort_values('Import√¢ncia', ascending=True)

                    fig_importance = px.bar(
                        importance_df,
                        x='Import√¢ncia',
                        y='Feature',
                        orientation='h',
                        title='Import√¢ncia das Features no Modelo Random Forest',
                        color='Import√¢ncia',
                        color_continuous_scale='viridis'
                    )
                    st.plotly_chart(fig_importance, use_container_width=True)

                else:
                    st.warning("‚ö†Ô∏è Informa√ß√µes de import√¢ncia n√£o dispon√≠veis no modelo")

            except Exception as e:
                st.error(f"‚ùå Erro ao carregar modelo: {e}")
        else:
            st.warning("‚ö†Ô∏è Modelo n√£o encontrado. Execute `python train_model.py` primeiro.")

        # Amostra dos dados
        st.subheader("üîç Amostra dos Dados")

        col1, col2 = st.columns(2)

        with col1:
            show_sample = st.checkbox("Mostrar amostra dos dados", value=False)

        with col2:
            sample_size = st.slider("Tamanho da amostra:", 5, 100, 20)

        if show_sample:
            sample_df = df.sample(n=min(sample_size, len(df)))
            st.dataframe(sample_df, use_container_width=True)

        # Download do dataset
        st.subheader("üíæ Download")

        csv = df.to_csv(index=False)
        st.download_button(
            label="üì• Baixar Dataset Completo (CSV)",
            data=csv,
            file_name=f"water_potability_dataset_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )

    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dataset: {e}")
        logger.error(f"Erro no show_dataset: {e}")


def show_r_analysis():
    """Exibe p√°gina de an√°lise estat√≠stica em R."""
    st.header("üìä An√°lise Estat√≠stica em R")
    
    st.markdown("""
    **An√°lises estat√≠sticas avan√ßadas usando R para dados de qualidade da √°gua**
    
    Esta p√°gina permite realizar an√°lises estat√≠sticas detalhadas dos dados coletados pelos sensores,
    utilizando a linguagem R para processamento e visualiza√ß√£o avan√ßada.
    """)
    
    # Sele√ß√£o do tipo de dados
    st.subheader("üóÇÔ∏è Fonte dos Dados")
    
    data_source = st.radio(
        "Escolha a fonte dos dados para an√°lise:",
        options=["Dados Pr√©-carregados", "Dados Coletados em Tempo Real"],
        help="Selecione se deseja analisar o dataset pr√©-carregado ou os dados coletados pelos sensores"
    )
    
    # Divisor visual
    st.divider()
    
    if data_source == "Dados Pr√©-carregados":
        show_preloaded_data_analysis()
    else:
        show_realtime_data_analysis()


def show_preloaded_data_analysis():
    """Exibe an√°lise dos dados pr√©-carregados."""
    st.subheader("üìà An√°lise de Dados Pr√©-carregados")
    
    st.info("""
    **Dataset de Treinamento**
    
    Utilizando o dataset `water_potability.csv` com dados hist√≥ricos para an√°lises estat√≠sticas.
    """)
    
    # Verificar se R est√° dispon√≠vel
    r_analyzer = RAnalyzer()
    r_available = r_analyzer.check_r_availability()
    
    # Adicionar informa√ß√µes de debug
    with st.expander("üîß Debug - Informa√ß√µes do Sistema"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Ambiente Python:**")
            st.code(f"""
Virtual Env: {os.environ.get('VIRTUAL_ENV', 'N√£o detectada')}
Python: {sys.executable}
Working Dir: {os.getcwd()}
            """)
        
        with col2:
            st.markdown("**Detec√ß√£o do R:**")
            if r_available:
                st.success(f"‚úÖ R encontrado em: {r_analyzer.rscript_path}")
            else:
                st.error("‚ùå R n√£o encontrado")
                
            if st.button("üîÑ For√ßar Nova Detec√ß√£o do R"):
                # Criar nova inst√¢ncia para for√ßar nova detec√ß√£o
                st.cache_data.clear()  # Limpar cache do Streamlit
                r_analyzer = RAnalyzer()  # Nova inst√¢ncia
                r_available = r_analyzer.check_r_availability(force_recheck=True)
                if r_available:
                    st.success(f"‚úÖ R encontrado ap√≥s nova detec√ß√£o: {r_analyzer.rscript_path}")
                    st.rerun()
                else:
                    st.error("‚ùå R ainda n√£o foi encontrado")
    
    if not r_available:
        return
    
    # Carregar dataset
    try:
        dataset_path = Path(__file__).parent.parent.parent / "water_potability.csv"
        if not dataset_path.exists():
            st.error("‚ùå Dataset water_potability.csv n√£o encontrado!")
            return
        
        df = pd.read_csv(dataset_path)
        
        # Informa√ß√µes sobre o dataset
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Registros", f"{len(df):,}")
        
        with col2:
            st.metric("Vari√°veis", f"{len(df.columns)}")
        
        with col3:
            missing_pct = (df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100
            st.metric("% Valores Ausentes", f"{missing_pct:.1f}%")
        
        with col4:
            potable_pct = (df['Potability'].sum() / len(df)) * 100
            st.metric("% Pot√°vel", f"{potable_pct:.1f}%")
        
        # Sele√ß√£o de vari√°veis para an√°lise
        st.subheader("üî¨ Configura√ß√£o da An√°lise")
        
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        if 'Potability' in numeric_columns:
            numeric_columns.remove('Potability')
        
        selected_vars = st.multiselect(
            "Selecione as vari√°veis para an√°lise:",
            options=numeric_columns,
            default=numeric_columns[:3] if len(numeric_columns) >= 3 else numeric_columns,
            help="Escolha quais vari√°veis num√©ricas analisar"
        )
        
        if not selected_vars:
            st.warning("‚ö†Ô∏è Selecione pelo menos uma vari√°vel para an√°lise.")
            return
        
        # Tipos de an√°lise
        analysis_types = st.multiselect(
            "Selecione os tipos de an√°lise:",
            options=[
                "Medidas de Tend√™ncia Central",
                "Medidas de Dispers√£o", 
                "Medidas Separatrizes",
                "Gr√°ficos (Histograma, Boxplot)",
                "An√°lise de Potabilidade"
            ],
            default=["Medidas de Tend√™ncia Central", "Gr√°ficos (Histograma, Boxplot)"]
        )
        
        if st.button("üöÄ Executar An√°lises Estat√≠sticas em R", type="primary"):
            
            # Preparar dados para an√°lise
            analysis_df = df[selected_vars + ['Potability']].copy()
            analysis_df = analysis_df.rename(columns={'Potability': 'potability'})
            
            with st.spinner("‚è≥ Executando an√°lises estat√≠sticas em R..."):
                
                try:
                    # Executar an√°lise R
                    results = r_analyzer.analyze_data(analysis_df)
                    
                    if "error" in results:
                        st.error(f"‚ùå Erro na an√°lise: {results['error']}")
                        return
                    
                    st.success("‚úÖ An√°lises conclu√≠das com sucesso!")
                    
                    # Exibir resultados estat√≠sticos
                    if "statistics" in results and results["statistics"]:
                        st.subheader("üìä Resultados Estat√≠sticos")
                        
                        for var, stats in results["statistics"].items():
                            st.markdown(f"### üìà {var.title()}")
                            
                            col1, col2, col3 = st.columns(3)
                            
                            # Tend√™ncia central
                            if "tendencia_central" in stats:
                                with col1:
                                    st.markdown("**Tend√™ncia Central**")
                                    tc = stats["tendencia_central"]
                                    st.metric("M√©dia", f"{tc.get('media', 0):.4f}")
                                    st.metric("Mediana", f"{tc.get('mediana', 0):.4f}")
                                    st.metric("Moda", f"{tc.get('moda', 0):.4f}")
                            
                            # Dispers√£o
                            if "dispersao" in stats:
                                with col2:
                                    st.markdown("**Dispers√£o**")
                                    disp = stats["dispersao"]
                                    st.metric("Vari√¢ncia", f"{disp.get('variancia', 0):.4f}")
                                    st.metric("Desvio Padr√£o", f"{disp.get('desvio_padrao', 0):.4f}")
                                    st.metric("Amplitude", f"{disp.get('amplitude', 0):.4f}")
                                    st.metric("IQR", f"{disp.get('iqr', 0):.4f}")
                            
                            # Separatrizes
                            if "separatrizes" in stats:
                                with col3:
                                    st.markdown("**Separatrizes**")
                                    sep = stats["separatrizes"]
                                    
                                    if "quartis" in sep:
                                        quartis = sep["quartis"]
                                        # quartis vem como lista [Q1, Q2, Q3] do R
                                        if isinstance(quartis, list) and len(quartis) >= 3:
                                            st.metric("Q1", f"{quartis[0]:.4f}")
                                            st.metric("Q2 (Mediana)", f"{quartis[1]:.4f}")
                                            st.metric("Q3", f"{quartis[2]:.4f}")
                                        elif isinstance(quartis, dict):
                                            # Fallback para formato de dicion√°rio
                                            st.metric("Q1", f"{quartis.get('25%', 0):.4f}")
                                            st.metric("Q2 (Mediana)", f"{quartis.get('50%', 0):.4f}")
                                            st.metric("Q3", f"{quartis.get('75%', 0):.4f}")
                            
                            st.divider()
                    
                    # Exibir gr√°ficos
                    if "graphics" in results and results["graphics"]:
                        st.subheader("üìä Visualiza√ß√µes")
                        
                        # Organizar gr√°ficos em colunas
                        graphics = results["graphics"]
                        
                        # Gr√°ficos de barras para potabilidade
                        if "barplot_potability" in graphics:
                            st.markdown("### üìä Distribui√ß√£o de Potabilidade")
                            img_data = base64.b64decode(graphics["barplot_potability"])
                            st.image(img_data, use_column_width=True)
                            st.divider()
                        
                        # Histogramas e boxplots
                        for var in selected_vars:
                            hist_key = f"histogram_{var}"
                            box_key = f"boxplot_{var}"
                            
                            if hist_key in graphics or box_key in graphics:
                                st.markdown(f"### üìà {var.title()}")
                                
                                col1, col2 = st.columns(2)
                                
                                if hist_key in graphics:
                                    with col1:
                                        st.markdown("**Histograma**")
                                        img_data = base64.b64decode(graphics[hist_key])
                                        st.image(img_data, use_column_width=True)
                                
                                if box_key in graphics:
                                    with col2:
                                        st.markdown("**Boxplot**")
                                        img_data = base64.b64decode(graphics[box_key])
                                        st.image(img_data, use_column_width=True)
                                
                                st.divider()
                    
                    # Log da execu√ß√£o R
                    if "r_output" in results and results["r_output"]:
                        with st.expander("üîç Log da Execu√ß√£o R"):
                            st.code(results["r_output"])
                
                except Exception as e:
                    st.error(f"‚ùå Erro durante a an√°lise: {str(e)}")
                    logger.error(f"Erro na an√°lise R: {str(e)}")
    
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dataset: {str(e)}")
        logger.error(f"Erro ao carregar dataset: {str(e)}")


def show_realtime_data_analysis():
    """Exibe an√°lise dos dados coletados em tempo real."""
    st.subheader("‚è∞ An√°lise de Dados em Tempo Real")
    
    st.info("""
    **Dados dos Sensores IoT**
    
    Analisando dados coletados pelos sensores ESP32 em tempo real.
    """)
    
    # Verificar se R est√° dispon√≠vel
    r_analyzer = RAnalyzer()
    r_available = r_analyzer.check_r_availability()
    
    # Adicionar informa√ß√µes de debug
    with st.expander("üîß Debug - Informa√ß√µes do Sistema"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Ambiente Python:**")
            st.code(f"""
Virtual Env: {os.environ.get('VIRTUAL_ENV', 'N√£o detectada')}
Python: {sys.executable}
Working Dir: {os.getcwd()}
            """)
        
        with col2:
            st.markdown("**Detec√ß√£o do R:**")
            if r_available:
                st.success(f"‚úÖ R encontrado em: {r_analyzer.rscript_path}")
            else:
                st.error("‚ùå R n√£o encontrado")
                
            if st.button("üîÑ For√ßar Nova Detec√ß√£o do R"):
                # Criar nova inst√¢ncia para for√ßar nova detec√ß√£o
                st.cache_data.clear()  # Limpar cache do Streamlit
                r_analyzer = RAnalyzer()  # Nova inst√¢ncia
                r_available = r_analyzer.check_r_availability(force_recheck=True)
                if r_available:
                    st.success(f"‚úÖ R encontrado ap√≥s nova detec√ß√£o: {r_analyzer.rscript_path}")
                    st.rerun()
                else:
                    st.error("‚ùå R ainda n√£o foi encontrado")
    
    if not r_available:
        return
    
    # Carregar dados recentes
    try:
        readings = get_recent_readings(1000)  # √öltimas 1000 leituras
        
        if not readings:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado. Verifique se o sistema de coleta est√° ativo.")
            st.markdown("""
            **Para coletar dados:**
            1. Execute o servidor: `python -m src.api.servidor`
            2. Configure o simulador ESP32 no Wokwi
            3. Pressione o bot√£o na simula√ß√£o para enviar dados
            """)
            return
        
        df = pd.DataFrame(readings)
        
        # Tratar timestamp se existir
        if 'timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
        
        # M√©tricas dos dados em tempo real
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Leituras", len(df))
        
        with col2:
            if 'timestamp' in df.columns:
                latest = df['timestamp'].max()
                oldest = df['timestamp'].min()
                period = latest - oldest
                st.metric("Per√≠odo", f"{period.days} dias")
            else:
                st.metric("Per√≠odo", "N/A")
        
        with col3:
            if 'potability' in df.columns:
                potable_count = df[df['potability'] == 1].shape[0]
                potable_pct = (potable_count / len(df)) * 100
                st.metric("% Pot√°vel", f"{potable_pct:.1f}%")
            else:
                st.metric("% Pot√°vel", "N/A")
        
        with col4:
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            st.metric("Vari√°veis Num√©ricas", len(numeric_cols))
        
        # Pr√©via dos dados
        st.subheader("üìã Pr√©via dos Dados")
        st.dataframe(df.head(10), use_container_width=True)
        
        # Configura√ß√£o da an√°lise
        st.subheader("üî¨ Configura√ß√£o da An√°lise")
        
        # Sele√ß√£o de vari√°veis
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        if 'potability' in numeric_columns:
            numeric_columns.remove('potability')
        if 'id' in numeric_columns:
            numeric_columns.remove('id')
        
        if not numeric_columns:
            st.warning("‚ö†Ô∏è Nenhuma vari√°vel num√©rica encontrada nos dados.")
            return
        
        selected_vars = st.multiselect(
            "Selecione as vari√°veis para an√°lise:",
            options=numeric_columns,
            default=numeric_columns,
            help="Escolha quais vari√°veis dos sensores analisar"
        )
        
        if not selected_vars:
            st.warning("‚ö†Ô∏è Selecione pelo menos uma vari√°vel para an√°lise.")
            return
        
        # Tipos de an√°lise
        analysis_types = st.multiselect(
            "Selecione os tipos de an√°lise:",
            options=[
                "Medidas de Tend√™ncia Central",
                "Medidas de Dispers√£o", 
                "Medidas Separatrizes",
                "Gr√°ficos (Histograma, Boxplot)",
                "An√°lise de Potabilidade",
                "Controle de Qualidade"
            ],
            default=["Medidas de Tend√™ncia Central", "Gr√°ficos (Histograma, Boxplot)"]
        )
        
        # Configura√ß√µes avan√ßadas
        with st.expander("‚öôÔ∏è Configura√ß√µes Avan√ßadas"):
            col1, col2 = st.columns(2)
            
            with col1:
                sample_size = st.number_input(
                    "Tamanho da Amostra", 
                    min_value=10, 
                    max_value=len(df), 
                    value=min(500, len(df)),
                    help="N√∫mero de registros mais recentes para an√°lise"
                )
            
            with col2:
                remove_outliers = st.checkbox(
                    "Remover Outliers", 
                    value=False,
                    help="Remove valores extremos antes da an√°lise"
                )
        
        if st.button("üöÄ Executar An√°lises Estat√≠sticas em R", type="primary"):
            
            # Preparar dados para an√°lise
            analysis_df = df[selected_vars + (['potability'] if 'potability' in df.columns else [])].copy()
            
            # Usar apenas os registros mais recentes
            if len(analysis_df) > sample_size:
                analysis_df = analysis_df.tail(sample_size)
            
            # Remover outliers se solicitado
            if remove_outliers:
                Q1 = analysis_df[selected_vars].quantile(0.25)
                Q3 = analysis_df[selected_vars].quantile(0.75)
                IQR = Q3 - Q1
                mask = ~((analysis_df[selected_vars] < (Q1 - 1.5 * IQR)) | 
                        (analysis_df[selected_vars] > (Q3 + 1.5 * IQR))).any(axis=1)
                analysis_df = analysis_df[mask]
                st.info(f"üìä Dados ap√≥s remo√ß√£o de outliers: {len(analysis_df)} registros")
            
            with st.spinner("‚è≥ Executando an√°lises estat√≠sticas em R..."):
                
                try:
                    # Executar an√°lise R
                    results = r_analyzer.analyze_data(analysis_df)
                    
                    if "error" in results:
                        st.error(f"‚ùå Erro na an√°lise: {results['error']}")
                        return
                    
                    st.success("‚úÖ An√°lises conclu√≠das com sucesso!")
                    
                    # Sum√°rio da an√°lise
                    st.subheader("üìã Sum√°rio da An√°lise")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Registros Analisados", len(analysis_df))
                    with col2:
                        st.metric("Vari√°veis", len(selected_vars))
                    with col3:
                        if 'timestamp' in df.columns:
                            latest_reading = df['timestamp'].max()
                            st.metric("√öltima Leitura", latest_reading.strftime("%d/%m/%Y %H:%M"))
                        else:
                            st.metric("√öltima Leitura", "N/A")
                    
                    # Exibir resultados estat√≠sticos
                    if "statistics" in results and results["statistics"]:
                        st.subheader("üìä Resultados Estat√≠sticos")
                        
                        for var, stats in results["statistics"].items():
                            st.markdown(f"### üìà {var.title().replace('_', ' ')}")
                            
                            col1, col2, col3 = st.columns(3)
                            
                            # Tend√™ncia central
                            if "tendencia_central" in stats:
                                with col1:
                                    st.markdown("**Tend√™ncia Central**")
                                    tc = stats["tendencia_central"]
                                    st.metric("M√©dia", f"{tc.get('media', 0):.4f}")
                                    st.metric("Mediana", f"{tc.get('mediana', 0):.4f}")
                                    if not pd.isna(tc.get('moda', 0)):
                                        st.metric("Moda", f"{tc.get('moda', 0):.4f}")
                            
                            # Dispers√£o
                            if "dispersao" in stats:
                                with col2:
                                    st.markdown("**Dispers√£o**")
                                    disp = stats["dispersao"]
                                    st.metric("Vari√¢ncia", f"{disp.get('variancia', 0):.4f}")
                                    st.metric("Desvio Padr√£o", f"{disp.get('desvio_padrao', 0):.4f}")
                                    st.metric("Amplitude", f"{disp.get('amplitude', 0):.4f}")
                                    st.metric("IQR", f"{disp.get('iqr', 0):.4f}")
                            
                            # Separatrizes
                            if "separatrizes" in stats:
                                with col3:
                                    st.markdown("**Separatrizes**")
                                    sep = stats["separatrizes"]
                                    
                                    if "quartis" in sep:
                                        quartis = sep["quartis"]
                                        # quartis vem como lista [Q1, Q2, Q3] do R
                                        if isinstance(quartis, list) and len(quartis) >= 3:
                                            st.metric("Q1", f"{quartis[0]:.4f}")
                                            st.metric("Q2 (Mediana)", f"{quartis[1]:.4f}")
                                            st.metric("Q3", f"{quartis[2]:.4f}")
                                        elif isinstance(quartis, dict):
                                            # Fallback para formato de dicion√°rio
                                            st.metric("Q1", f"{quartis.get('25%', 0):.4f}")
                                            st.metric("Q2 (Mediana)", f"{quartis.get('50%', 0):.4f}")
                                            st.metric("Q3", f"{quartis.get('75%', 0):.4f}")
                            
                            st.divider()
                    
                    # Exibir gr√°ficos
                    if "graphics" in results and results["graphics"]:
                        st.subheader("üìä Visualiza√ß√µes")
                        
                        graphics = results["graphics"]
                        
                        # Gr√°fico de potabilidade (se dispon√≠vel)
                        if "barplot_potability" in graphics:
                            st.markdown("### üìä Distribui√ß√£o de Potabilidade")
                            img_data = base64.b64decode(graphics["barplot_potability"])
                            st.image(img_data, use_column_width=True)
                            st.divider()
                        
                        # Histogramas e boxplots para cada vari√°vel
                        for var in selected_vars:
                            hist_key = f"histogram_{var}"
                            box_key = f"boxplot_{var}"
                            
                            if hist_key in graphics or box_key in graphics:
                                st.markdown(f"### üìà {var.title().replace('_', ' ')}")
                                
                                col1, col2 = st.columns(2)
                                
                                if hist_key in graphics:
                                    with col1:
                                        st.markdown("**Histograma**")
                                        img_data = base64.b64decode(graphics[hist_key])
                                        st.image(img_data, use_column_width=True)
                                
                                if box_key in graphics:
                                    with col2:
                                        st.markdown("**Boxplot**")
                                        img_data = base64.b64decode(graphics[box_key])
                                        st.image(img_data, use_column_width=True)
                                
                                st.divider()
                    
                    # Insights e recomenda√ß√µes
                    st.subheader("üí° Insights e Recomenda√ß√µes")
                    
                    insights = []
                    
                    if "statistics" in results:
                        for var, stats in results["statistics"].items():
                            if "dispersao" in stats:
                                cv = stats["dispersao"]["desvio_padrao"] / abs(stats["tendencia_central"]["media"]) * 100
                                if cv > 30:
                                    insights.append(f"üîç **{var}**: Alta variabilidade detectada (CV={cv:.1f}%) - verificar calibra√ß√£o do sensor")
                                elif cv < 5:
                                    insights.append(f"‚úÖ **{var}**: Baixa variabilidade (CV={cv:.1f}%) - sensor est√°vel")
                    
                    if insights:
                        for insight in insights:
                            st.markdown(insight)
                    else:
                        st.info("üìä Dados dentro dos padr√µes esperados.")
                    
                    # Log da execu√ß√£o R
                    if "r_output" in results and results["r_output"]:
                        with st.expander("üîç Log da Execu√ß√£o R"):
                            st.code(results["r_output"])
                
                except Exception as e:
                    st.error(f"‚ùå Erro durante a an√°lise: {str(e)}")
                    logger.error(f"Erro na an√°lise R: {str(e)}")
            
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados: {str(e)}")
        logger.error(f"Erro ao carregar dados em tempo real: {str(e)}")


if __name__ == "__main__":
    main() 